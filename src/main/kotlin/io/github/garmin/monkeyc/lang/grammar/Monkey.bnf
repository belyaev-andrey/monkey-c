{
  parserClass="io.github.garmin.monkeyc.lang.parser.MonkeyParser"
  parserUtilClass="io.github.garmin.monkeyc.lang.parser.MonkeyParserUtil"

  implements="io.github.garmin.monkeyc.lang.psi.MonkeyPsiCompositeElement"
  extends="io.github.garmin.monkeyc.lang.psi.impl.MonkeyPsiCompositeElementImpl"

  elementTypeHolderClass="io.github.garmin.monkeyc.lang.psi.MonkeyTypes"
  elementTypePrefix=""
  elementTypeClass="io.github.garmin.monkeyc.lang.psi.MonkeyElementType"
  tokenTypeClass="io.github.garmin.monkeyc.lang.psi.MonkeyTokenType"

  psiClassPrefix="Monkey"
  psiImplClassSuffix="Impl"
  psiPackage="io.github.garmin.monkeyc.lang.psi"
  psiImplPackage="io.github.garmin.monkeyc.lang.psi.impl"
  psiImplUtilClass="io.github.garmin.monkeyc.lang.psi.impl.MonkeyPsiImplUtil"

  tokens = [
    DOT = "."
    SEMI = ";"
    QUES = "?"
    COLON = ":"
    CLASS = "class"
    PRIVATE = "private"
    PROTECTED = "protected"
    PUBLIC = "public"
    INTERFACE = "interface"
    FUNCTION = "function"
    RETURN = "return"
    NEW = "new"
    VAR = "var"
    CONST = "const"
    MODULE = "module"
    USING = "using"
    IMPORT = "import"
    TYPEDEF = "typedef"
    AS = "as"
    ENUM = "enum"
    ARRAY = "Array"
    DICTIONARY = "Dictionary"
    EXTENDS = "extends"
    NULL = "null"
    NATIVE = "native"
    HIDDEN = "hidden"
    STATIC = "static"
    INSTANCEOF = "instanceof"
    HAS = "has"
    IF = "if"
    ELSE = "else"
    DO = "do"
    WHILE = "while"
    FOR = "for"
    BREAK = "break"
    CONTINUE = "continue"
    SWITCH = "switch"
    DEFAULT = "default"
    CASE = "case"
    TRY = "try"
    CATCH = "catch"
    FINALLY = "finally"
    THROW = "throw"
    AND = "and"
    OR = "or"
    TRUE = "true"
    FALSE = "false"

    // https://forums.garmin.com/showthread.php?180989-Monkey-C-grammar-questions
    //  Both 'self' and 'me' both refer to 'this'. 'me' is just a holdover and might be removed in the future.
    THIS = "this"
    SELF = "self"

    // reference to the global scope
    BLING="$"

    //SINGLE_LINE_COMMENT = "//"
    MULTI_LINE_COMMENT_START = "/*"
    MULTI_LINE_COMMENT_END = "*/"
    STRING_A = "\""
    STRING_B = "\'"

    LBRACE = "{"
    RBRACE = "}"

    LBRACKET = "["
    RBRACKET = "]"

    LPAREN = "("
    RPAREN = ")"
    COMMA = ","
    STAR = "*"
    BAR = "|"
    LT = "<"
    GT = ">"

    EQGT = "=>"

    AMP = "&"

    BARBAR = "||"
    AMPAMP = "&&"
    PLUSPLUS = "++"
    SUBSUB = "--"
    EQ = "="

    EQEQ = "=="
    BANGEQ = "!="

    PLUSEQ = "+="
    SUBEQ = "-="
    STAREQ = "*="
    SLASHEQ = "/="
    AMPEQ = "&="
    CARETEQ = "|="
    PERCENTEQ = "%="

    CARET = "^"
    PERCENT = "%"
    TILDE = "~"
    BANG = "!"

    PLUS = "+"
    SUB = "-"
    STAR = "*"
    SLASH = "/"

    // WHITE_SPACE is overwritten by JFlex, this here is only for Live Preview
    WHITE_SPACE='regexp:\s+'
    SINGLE_LINE_COMMENT='regexp://[^!].*'
    SINGLE_LINE_DOC_COMMENT='regexp://\!(.*)'

    BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'

    IDENTIFIER = 'regexp:[a-zA-Z$_][a-zA-Z0-9$_]*'

    LONGLITERAL = 'regexp:\d+[lL]'
    INTLITERAL = 'regexp:\d+'

    HEX_LITERAL = 'regexp:0[Xx][0-9a-fA-F]*'

    // 0 can be omitted before dot
    // either: x[fF] or (x).y and in the end optionally [fF]
    FLOATLITERAL = 'regexp:(\d+[fF]|(\d+)?\.\d+[fF]?)'
    DOUBLELITERAL = 'regexp:(\d+)?(\.\d+)?[dD]'

    string = "regexp:(\"([^\"\\]|\\.)*\")"
    CHARLITERAL = "regexp:'[^']*'"
  ]

  extends(".*Expression")="expression"
}

monkeyCFile ::= (usingDeclaration | importDeclaration)* compilationUnit*

private compilationUnit ::= moduleDeclaration
                          | classDeclaration
                          | enumDeclaration
                          | constDeclaration
                          | fieldDeclarationList
                          | functionDeclaration
                          | blockStatement
                          | typeDefinition
{recoverWhile="#auto"}

// {recoverWhile="compilationUnitRecover"}
// private compilationUnitRecover ::= !(CLASS | ENUM | HIDDEN | LPAREN | STATIC | USING)

// You can bring a module into your scoping level with the using or import keyword.
// using allows a module to be imported into another class or module by a symbol.
// using statements are scoped to the class or module in which they are defined.
usingDeclaration ::= USING  fullyQualifiedReferenceExpression (AS componentName)? SEMI {pin=2}

importDeclaration ::= IMPORT fullyQualifiedReferenceExpression SEMI {pin=2}

// module
// TODO: can a module have static/hidden modifiers?
moduleDeclaration ::= modifiers MODULE componentName moduleBody {
pin=2
mixin="io.github.garmin.monkeyc.lang.psi.impl.AbstractMonkeyComponentImpl"
implements="io.github.garmin.monkeyc.lang.psi.MonkeyComponent"
}

moduleBody ::= LBRACE moduleBodyMembers RBRACE {pin=1}
moduleBodyMembers ::= moduleBodyMember* {implements="io.github.garmin.monkeyc.lang.psi.MonkeyExecutionScope"}
private moduleBodyMember ::= constDeclaration | fieldDeclarationList | functionDeclaration | classDeclaration | enumDeclaration | moduleDeclaration | typeDefinition

private fullyQualifiedReferenceExpression ::= referenceOrThisExpression qualifiedReferenceExpression*

// class
classDeclaration ::= modifiers CLASS componentName (EXTENDS fullyQualifiedReferenceExpression)? classBody
{pin=2 mixin="io.github.garmin.monkeyc.lang.psi.impl.AbstractMonkeyPsiClass" implements="io.github.garmin.monkeyc.lang.psi.MonkeyClass"}

classBody ::= LBRACE classBodyMembers RBRACE {pin=1}
classBodyMembers ::= classBodyMember* {implements="io.github.garmin.monkeyc.lang.psi.MonkeyExecutionScope"}

private classBodyMember ::= constDeclaration | memberModifiers? (fieldDeclarationList | functionDeclaration) | classDeclaration | enumDeclaration

// interface
interfaceDeclaration ::= INTERFACE interfaceBody

interfaceBody ::= LBRACE interfaceBodyMembers RBRACE {pin=1}
interfaceBodyMembers ::= interfaceBodyMember* {implements="io.github.garmin.monkeyc.lang.psi.MonkeyExecutionScope"}

private interfaceBodyMember ::= fieldDeclarationList | functionDeclaration

// Enums must be declared at the module or class level; they cannot be declared within a function.
enumDeclaration ::= modifiers ENUM LBRACE enumConstant (COMMA enumConstant)* RBRACE

private maybeSignedInteger ::= (PLUS|SUB)? INTLITERAL

enumConstant ::= componentName (EQ maybeSignedInteger)? {
pin=1
mixin="io.github.garmin.monkeyc.lang.psi.impl.AbstractMonkeyComponentImpl"
implements="io.github.garmin.monkeyc.lang.psi.MonkeyComponent"
}

// Constants must be declared at the module or class level; they cannot be declared within a function.
constDeclaration ::= modifiers CONST componentName (EQ expression)? SEMI {
pin=2
mixin="io.github.garmin.monkeyc.lang.psi.impl.AbstractMonkeyComponentImpl"
implements="io.github.garmin.monkeyc.lang.psi.MonkeyComponent"
}

// field
fieldDeclarationList ::= modifiers VAR fieldDeclaration (COMMA fieldDeclaration)* SEMI
fieldDeclaration ::= varOrFieldDeclaration

// function
functionDeclaration ::= modifiers FUNCTION componentName
 LPAREN formalParameterDeclarations? RPAREN asTypeClause? block {
pin=3
mixin="io.github.garmin.monkeyc.lang.psi.impl.AbstractMonkeyComponentImpl"
implements="io.github.garmin.monkeyc.lang.psi.MonkeyComponent"
}

formalParameterDeclarations ::= componentName asTypeClause? (COMMA componentName asTypeClause?)*

block ::= LBRACE blockStatement* RBRACE

blockStatement ::= variableDeclarationList SEMI
                 | statement

variableDeclarationList ::= VAR variableDeclaration (COMMA variableDeclaration)*
variableDeclaration ::= varOrFieldDeclaration

private varOrFieldDeclaration ::= componentName (LBRACKET RBRACKET)* asTypeClause? (EQ variableInitializer)? {
pin=1
mixin="io.github.garmin.monkeyc.lang.psi.impl.AbstractMonkeyComponentImpl"
implements="io.github.garmin.monkeyc.lang.psi.MonkeyComponent"
}

//Typedef
typeDefinition ::= TYPEDEF componentName asTypeClause? SEMI

private typeReference ::= qualifiedName | containerDef QUES?

asTypeClause ::= AS (polyType | interfaceDeclaration)

private polyType ::= (typeReference (OR typeReference)*)

//Containers definition
containerDef ::= arrayContainer | dictionaryContainer

private arrayContainer ::= ARRAY (LT polyType GT)?

private dictionaryContainer ::= DICTIONARY (LT typeReference COMMA typeReference GT)?

//Initializers
variableInitializer ::= (arrayInitializer | expression) asTypeClause?

arrayInitializer ::= LBRACE (variableInitializer (COMMA variableInitializer)*)? COMMA? RBRACE

statement ::= block
            | IF parExpression statement (ELSE statement)?
            | forStatement
            | WHILE parExpression statement
            | DO statement WHILE parExpression SEMI
            | tryStatement
            | SWITCH parExpression LBRACE switchBlockStatementGroups RBRACE
            | RETURN expression? SEMI
            | THROW expression SEMI
            | BREAK referenceExpression? SEMI
            | CONTINUE referenceExpression? SEMI
            | expression SEMI
            | IDENTIFIER COLON statement
            | SEMI

switchBlockStatementGroups ::= (switchBlockStatementGroup)*

switchBlockStatementGroup ::= switchLabel (blockStatement)*

switchLabel ::= CASE (expression | instanceOfStatement) COLON | DEFAULT COLON

tryStatement ::= TRY block (catches FINALLY block | catches | FINALLY block)

catches ::= catchClause (catchClause)*

catchClause ::= CATCH LPAREN catchParameter RPAREN block

catchParameter ::= id (instanceOfStatement)?

forStatement ::= FOR LPAREN forInit? SEMI expression? SEMI expressionList? RPAREN statement

forInit ::= variableDeclarationList
          | expressionList

// expressions
expressionList ::= expression (COMMA expression)*

parExpression ::= LPAREN expression RPAREN

thisExpression ::= THIS | SELF {
mixin="io.github.garmin.monkeyc.lang.psi.impl.MonkeyReferenceImpl"
implements="io.github.garmin.monkeyc.lang.psi.MonkeyReference"
}

blingExpression ::= BLING {
mixin="io.github.garmin.monkeyc.lang.psi.impl.MonkeyReferenceImpl"
implements="io.github.garmin.monkeyc.lang.psi.MonkeyReference"
}

private referenceOrThisExpression ::= referenceExpression
                                    | thisExpression
                                    | blingExpression

expression ::= conditionalExpression (assignmentOperator expression)? asTypeClause?

assignmentOperator ::= EQ
                     | PLUSEQ
                     | SUBEQ
                     | STAREQ
                     | SLASHEQ
                     | AMPEQ
                     | BAREQ
                     | CARETEQ
                     | PERCENTEQ
                     | LT LT EQ
                     | GT GT GT EQ
                     | GT GT EQ

// optional ternary operator in the end
conditionalExpression ::= (conditionalOrExpression (QUES expression COLON conditionalExpression)?)

conditionalOrExpression ::= conditionalAndExpression ((BARBAR | OR) conditionalAndExpression)*

conditionalAndExpression ::= inclusiveOrExpression ((AMPAMP | AND) inclusiveOrExpression)*

inclusiveOrExpression ::= exclusiveOrExpression (BAR exclusiveOrExpression)*

exclusiveOrExpression ::= andExpression (CARET andExpression)*

andExpression ::= equalityExpression (AMP equalityExpression)*

equalityExpression ::= hasExpression ((EQEQ | BANGEQ) hasExpression)*

hasExpression ::= instanceOfExpression (HAS symbol)?

instanceOfExpression ::= relationalExpression (instanceOfStatement)?

private instanceOfStatement ::= INSTANCEOF qualifiedName

relationalExpression ::= shiftExpression (relationalOp shiftExpression)*

relationalOp ::= LT EQ | GT EQ | LT | GT

shiftExpression ::= additiveExpression (shiftOp additiveExpression)*

shiftOp ::= LT LT | GT GT GT | GT GT

additiveExpression ::= multiplicativeExpression ((PLUS | SUB) multiplicativeExpression)*

multiplicativeExpression ::= bitwiseExpression ((STAR | SLASH | PERCENT) unaryExpression)*

bitwiseExpression ::= unaryExpression (bitwiseOperator unaryExpression)*

bitwiseOperator ::= AMP | CARET| BAR

/**
 * NOTE: for '+' and '-', if the next token is int or long integral, then it's not a unary expression.
 *       it's a literal with signed value. INTLITERAL AND LONG LITERAL are added here for this.
 */
unaryExpression ::= PLUS unaryExpression
                  | SUB unaryExpression
                  | PLUSPLUS unaryExpression
                  | SUBSUB unaryExpression
                  | unaryExpressionNotPlusMinus

private unaryExpressionNotPlusMinus ::= TILDE unaryExpression
                                      | BANG unaryExpression
                                      | primary selector* (PLUSPLUS | SUBSUB)?

private primary ::= parExpression
                  | fullyQualifiedReferenceExpression identifierSuffix?
                  | literal
                  | symbol
                  | creator
                  | VOID DOT CLASS

qualifiedReferenceExpression ::= DOT referenceExpression {elementType="referenceExpression"}

referenceExpression ::= id {
  mixin="io.github.garmin.monkeyc.lang.psi.impl.MonkeyReferenceImpl"
  implements="io.github.garmin.monkeyc.lang.psi.MonkeyReference"
}

identifierSuffix ::= (LBRACKET expression RBRACKET)+
                   | arguments
                   | DOT CLASS
                   | DOT IDENTIFIER arguments
                   | DOT SUPER arguments

selector ::= DOT IDENTIFIER arguments?
           | LBRACKET expression RBRACKET

creator ::= objectCreator | arrayCreator
objectCreator ::= NEW fullyQualifiedReferenceExpression arguments classBody? {pin=2}

arrayCreator ::= NEW LBRACKET expression RBRACKET // new [expression evaluating to integer]
               | LBRACKET (expression (COMMA expression)* )? RBRACKET // [expression1, expression2, ...]
               | dictionaryCreator

dictionaryCreator ::= NEW LBRACE RBRACE // new {}
                    | LBRACE (keyValueInitializer (COMMA keyValueInitializer)* )? RBRACE // {"a"=> exp, :b => exp2, ...}

keyValueInitializer ::= primary EQGT expression

// When invoking parameter info (Ctrl+P) the children are counted here
// by ParameterInfoUtils.getCurrentParameterIndex(ASTNode, int, IElementType)
arguments ::= LPAREN argumentsList? RPAREN {
pin=1
}

private argumentsList ::= expression (COMMA expression)* {
recoverWhile="argumentsList_recover"
}
private argumentsList_recover ::= !(RPAREN)

// hidden is the same as "protected" in Java -  it says that a variable or function is only accessible to a class or its subclasses:
modifiers ::= annotation? STATIC? HIDDEN?

memberModifiers ::= (PRIVATE | PROTECTED | PUBLIC)?

annotation ::= LPAREN symbol RPAREN {pin=2}

symbol ::= COLON referenceExpression {pin=1}

qualifiedName ::= componentName (DOT componentName)*

componentName ::= id
{mixin="io.github.garmin.monkeyc.lang.psi.impl.MonkeyNamedElementImpl" implements="io.github.garmin.monkeyc.lang.psi.MonkeyNamedElement"}

// see strictID
id ::= IDENTIFIER

literal ::= INTLITERAL
          | LONGLITERAL
          | FLOATLITERAL
          | DOUBLELITERAL
          | HEX_LITERAL
          | CHARLITERAL
          | string
          | TRUE
          | FALSE
          | NULL

